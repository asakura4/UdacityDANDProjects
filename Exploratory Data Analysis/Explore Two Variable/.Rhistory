# function predict.regsubsets()
predict.regsubsets <- function(object, newdata, id, ...)
{
form <- as.formula(object$call[[2]])
mat <- model.matrix(form, newdata)
coefi = coef(object, id = id)
xvars <- names(coefi)
mat[, xvars]%*%coefi
}
libary(MASS)
library(MASS)
d0 = Cars93
names(d0)
d1$Cylinders = as.numeric(d1$Cylinders)
d1 = subset(d0,select=c(MPG.city, Cylinders, EngineSize, Horsepower, RPM, Passengers, Weight))
d1$Cylinders = as.numeric(d1$Cylinders)
library(leaps)
model <- regsubsets(MPG.city ~, d1)
model <- regsubsets(MPG.city ~., d1)
summary(model)
m1<- lm(MPG.city ~ EngineSize + Horsepower + RPM + Weight, d1)
m1<- lm(MPG.city ~ EngineSize + Horsepower + RPM + Weight, d1)
newval=data.frame(Cylinders=4,EngineSize=2.3,Horsepower=200,RPM=5500,Passengers=4,Weight=2950)
predict(m1,newval)
predict.regsubsets(models, newval, id = 4)
predict.regsubsets(model, newval, id = 4)
newval=data.frame(MPG.city = 0,Cylinders=4,EngineSize=2.3,Horsepower=200,RPM=5500,Passengers=4,Weight=2950)
predict.regsubsets(model, newval, id = 4)
ceiling(n/2)
set.seed(12)
n = nrow(d1)
ceiling(n/2)
set.seed(12)
train <- sample(1:n,47)
d1$test <- d1[-train, ]
d1$train <- d1[train,]
n/2
n = nrow(d1)
n/2
ceiling(n/2)
set.seed(12)
train <- sample(1:n,47)
d1$train <- d1[train,]
d1$test <- d1[-train, ]
d1test <- d1[-train, ]
d1train <- d1[train,]
d1test <- d1[-train, ]
yhat = predict.regsubsets(model,d1test, id = i)
mepe[i] = mean((y - yhat)^2)
mspe = rep(0,6)
y = d1test$MPG.city
for(i in 1:6){
yhat = predict.regsubsets(model,d1test, id = i)
mepe[i] = mean((y - yhat)^2)
}
mspe = rep(0,6)
y = d1test$MPG.city
for(i in 1:6){
yhat = predict.regsubsets(model,d1test, id = i)
mspe[i] = mean((y - yhat)^2)
}
models <- regsubsets(MPG.city~., d1train)
mspe = rep(0,6)
y = d1test$MPG.city
sample(1:4, n = 20, replace = T)
sample(1:4, 20, replace = T)
sample(1:4, 20, replace = T               )
sample(1:4, 20, replace = T)
a <- sample(1:4, 20, replace = T)
table(a)
order(a)
library(PASWR2)
library(leaps)
d0 = HSWRESTLER
ig=c(22,27,32,35,60)
d1 = d0[-ig,1:7]
head(d1)
n=nrow(d1)
k=5 #folds
set.seed(5)
folds=sample(k,n,replace=T)
n #[1] 73
head(folds) #[1] 2 4 5 2 1 4
table(folds)
length(folds)
mspe = matrix(0,k,6)  #5-by-6 matrix
mspe
d1[folds==1,]
table(folds)
d1[folds==1,]
dim(b)
b <- d1[folds==1,]
dim(b)
y = d1$hwfat[folds == 1]
y
y
for(j in 1:k){
y = d1$hwfat[folds == j] #y-value is jth fold
d2 = d1[folds  != j] #training set ignore jth fold
cvmodels <- regsubsets(hwfat~., d2)
for(i in 1:6){
newdata = d1[folds == j]
yhat <- predict.regsubsets(cvmodels, newdata, id = i)
mspe[j,i] = mean((y -yhat)^2)
}
}
for(j in 1:k){
y = d1$hwfat[folds == j] #y-value is jth fold
d2 = d1[folds!= j] #training set ignore jth fold
cvmodels <- regsubsets(hwfat~., d2)
for(i in 1:6){
newdata = d1[folds == j]
yhat <- predict.regsubsets(cvmodels, newdata, id = i)
mspe[j,i] = mean((y -yhat)^2)
}
}
for(j in 1:k){
y = d1$hwfat[folds == j] #y-value is jth fold
d2 = d1[folds!= j,] #training set ignore jth fold
cvmodels <- regsubsets(hwfat~., d2)
for(i in 1:6){
newdata = d1[folds == j,]
yhat <- predict.regsubsets(cvmodels, newdata, id = i)
mspe[j,i] = mean((y -yhat)^2)
}
}
mspe
cvk <- apply(mspe, 2, mean)
cvk
models <- regsubsets(hwfat ~., d1)
aux <- which.min(cvk)
aux <- which.min(cvk)
coef(models, aux)
rm(list = ls())
library(ISLR)
install.packages("ISLR")
library(ISLR)
train <- sample(x = 1:11, size = 6)
train
?sample
dim(auto)
dim(Auto)
m1 <- lm(mpg~horsepower, Auto, subset = train)
summary(m1)
set.seed(1)
train <- sample(x = 1:11, size = 6)
train
dim(Auto)
set.seed(1)
train <- sample(392, size = 196)
m1 <- lm(mpg~horsepower, Auto, subset = train)
summary(m1)
?attach
attach(Auto)
res <- (mpg - predict(m1, Auto))[-train]^2
head(res)
mspe1 <- mean(res)
meps1
mspe1
m2 <- lm(mpg~ploy(horsepower, 2), Auto, subset = train)
m2 <- lm(mpg~poly(horsepower, 2), Auto, subset = train)
res2 <- (mpg - predict(m2, Auto))[-train]^2
res <- (mpg - predict(m2, Auto))[-train]^2
res <- (mpg - predict(m2, Auto))[-train]^2
mspe2 <- mean(res)
mspe2
m3 <- lm(mpg~poly(horsepower, 3), Auto, subset = train)
res <- (mpg - predict(m3, Auto))[-train]^2
mspe3 <- mean(res)
mspe3
m3 <- lm(mpg~poly(horsepower, 3), Auto, subset = train)
m1 <- lm(mpg ~horsepower, Auto)
coef(m1)
m1 <- lm(mpg ~horsepower, Auto)
coef(m1)
glm1 <- glm(mpg ~horsepower, data = Auto)
coef(m1)
cverr <- cv.glm(Auto, glm1)
library(boot)
cverr <- cv.glm(Auto, glm1)
summary()
summary(cverr)
cverr$delta
cverror = rep(0,5)
cverror[i] = cv.glm(Auto, models)$delta[1]
for(i in 1:5){
models = glm(mpg~poly(horsepower, i), data = Auto)
cverror[i] = cv.glm(Auto, models)$delta[1]
}
set.seed(17)
cverrors = rep(0,10)
models <- glm(mpg ~ poly(horsepower, i), data = Auto)
cverrors = rep(0,10)
for(i in 1:10){
models <- glm(mpg ~ poly(horsepower, i), data = Auto)
cverrors[i] = cv.glm(Auto, models)
}
cverrors[i] = cv.glm(Auto, models, K =10)$delta[1]
rm(list= ls())
library(ggplot2)
wine <- read.csv("wineQualityReds.csv")
wine <- wine[,-1]
wine$quality <- as.factor(wine$quality)
wine$quality <- as.factor(wine$quality)
str(wine)
percentage <- paste0(round(prop.table(table(wine$quality)),4)*100, "%")
names(percentage) <- c("3","4","5","6","7","8")
percentage
percentage <- paste0(round(prop.table(table(wine$quality)),4)*100, "%")
ggplot(aes(x = "", fill = quality), data = wine) +
geom_bar(width = 1) +
coord_polar(theta = "y") +
theme_void()
ggplot(aes(alcohol), data = wine) +
geom_histogram(color = I('black'),fill = I('#0099D9'))
ggplot(aes(pH), data = wine) +
geom_histogram(color = I('black'),fill = I('#0099D9'))
ggplot(aes(residual.sugar), data = wine) +
geom_histogram(color = I('black'),fill = I('#F79420')) +
scale_x_continuous(breaks = seq(0,8,1), lim = c(0,8))
ggplot(aes(residual.sugar), data = wine) +
geom_histogram(color = I('black'),fill = I('#5760AB'))
ggplot(aes(density), data = wine) +
geom_histogram(color = I('black'),fill = I('#5760AB'))
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(gu1, gu2,ncol = 1 )
gu1 <- ggplot(aes(residual.sugar), data = wine) +
geom_histogram(color = I('black'),fill = I('#F79420')) +
scale_x_continuous(breaks = seq(0,8,1), lim = c(0,8))
gu2 <- ggplot(aes(residual.sugar), data = wine) +
geom_histogram(color = I('black'),fill = I('#F79420')) +
scale_x_log10()
grid.arrange(gu1, gu2,ncol = 1 )
gu1 <- ggplot(aes(residual.sugar), data = wine) +
geom_histogram(color = I('black'),fill = I('#F79420'))
gu2 <- ggplot(aes(residual.sugar), data = wine) +
geom_histogram(color = I('black'),fill = I('#F79420')) +
scale_x_log10()
grid.arrange(gu1, gu2,ncol = 1 )
gu2 <- ggplot(aes(residual.sugar), data = wine) +
geom_histogram(color = I('black'),fill = I('#F79420')) +
scale_x_log10() +
geom_label(aes(label = c("log(residual.sugar)", "count")))
grid.arrange(gu1, gu2,ncol = 1 )
gu1 <- ggplot(aes(residual.sugar), data = wine) +
geom_histogram(color = I('black'),fill = I('#F79420'))
gu2 <- ggplot(aes(residual.sugar), data = wine) +
geom_histogram(color = I('black'),fill = I('#F79420')) +
scale_x_log10() +
xlab("log(residual.sugar)")
grid.arrange(gu1, gu2,ncol = 1 )
str(wine)
ggplot(aes(x = pH, y = quality), data = wine) +
geom_point(alpha = 1/20) + xlim(13,90)
ggplot(aes(x = pH, y = quality), data = wine) +
geom_point(alpha = 1/20)
ggplot(aes(x = pH, y = quality), data = wine) +
geom_point(alpha = 1/10)
setwd("C:/Users/Howard/Desktop/Learnbyself/Udacity/DAND/Exploratory Data Analysis/Explore Two Variable")
library(ggplot2)
pf <- read.delim("pseudo_facebook.tsv")
qplot(x = age, y = friend_count, data = pf)
qplot(age, friend_count, data = pf)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point()
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point()
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) + xlim(13,90)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) + xlim(13,90) + coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) + xlim(13,90) + coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha =1/10, position = position_jitter(h = 0)) +
coord_trans(y = "sqrt")
pf.fc_by_age <- pf %>%
group_by(age) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
library(dplyr)
install.packages("dplyr")
pf.fc_by_age <- pf %>%
group_by(age) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
library(dplyr)
pf.fc_by_age <- pf %>%
group_by(age) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
head(pf.fc_by_age)
pf.fc_by_age <- pf %>%
group_by(age) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_line()
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position = position_jitter(h = 0),
color = "orange") +
coord_trans(y = "sqrt") +
geom_line(stat = "summary", fun.y = mean)+
geom_line(stat = "summary", fun.y = quantile,
fun.args = list(probs = .1), linetype = 2, color = "blue") +
geom_line(stat = "summary", fun.y = quantile,
fun.args = list(probs = .9), linetype = 2, color = "blue")
cor.test(pf$age, pf$friend_count, method = 'pearson')
ggplot(aes(x = www_likes_received, y =likes_received), data = pf) +
geom_point()
ggplot(aes(x = www_likes_received, y =likes_received), data = pf) +
geom_point() +
xlim(0, quantile(pf$www_likes_received, 0.95)) +
ylim(0, quantile(pf$likes_received, 0.95)) +
geom_smooth(method = 'lm', color = 'red')
ggplot(aes(x = Month, y = Temp), data = Mitchell) +
geom_point()
install.packages('alr3')
library(alr3)
library(alr3)
data(Mitchell)
ggplot(aes(x = Month, y = Temp), data = Mitchell) +
geom_point()
cor.test(Mitchell$Month, Mitchell$Temp)
ggplot(aes(x = Month, y = Temp), data = Mitchell) +
geom_point() +
scale_x_continuous(breaks = seq(min(Mitchell$Month), max(Mitchell$Month), 12))
ggplot(aes(x = age, y = friend_count_mean), data = pf.fc_by_age) +
geom_line()
pf.fc_by_age[17:19,]
pf.fc_by_age_months <- pf %>%
group_by(age_with_months) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())%>%
arrange(age_with_months)
pf$age_with_months <- pf$age + 1 - pf$dob_month/12
pf.fc_by_age_months <- pf %>%
group_by(age_with_months) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())%>%
arrange(age_with_months)
head(pf.fc_by_age_months)
ggplot(aes(x = age_with_months, y = friend_count_mean),
data = subset(pf.fc_by_age_months, pf.fc_by_age_months$age_with_months < 71)) +
geom_line()
p1 <- ggplot(aes(x = age, y = friend_count_mean),
data = subset(pf.fc_by_age, age < 71)) +
geom_line() +
geom_smooth()
p2 <- ggplot(aes(x = age_with_months, y = friend_count_mean),
data = subset(pf.fc_by_age_months, pf.fc_by_age_months$age_with_months < 71)) +
geom_line()+
geom_smooth()
p3 <- ggplot(aes(x = round(age/5)*5, y = friend_count),
data = subset(pf, age < 71)) +
geom_line(stat = 'summary', fun.y = mean)
library(gridExtra)
grid.arrange(p2, p1,p3, ncol = 1)
str(wine)
ggplot(aes(x = pH, y = critic.acid), data = wine) +
geom_point(alpha = 1/10)
ggplot(aes(x = pH, y = citric.acid), data = wine) +
geom_point(alpha = 1/10)
ggplot(aes(x = pH, y = citric.acid), data = wine) +
geom_point()
ggplot(aes(x = pH, y = citric.acid), data = wine) +
geom_point(alpha = 0.2)
ggplot(aes(x = pH, y = citric.acid), data = wine) +
geom_point(alpha = 0.2) +
geom_smooth(method = 'lm', color = 'red')
ggplot(aes(x = pH, y = citric.acid), data = wine) +
geom_point(alpha = 0.2) +
geom_smooth(method = 'lm', color = 'red') +
ylim(0, quantile(wine$citric.acid, 0.99))
ggplot(aes(x = pH, y = citric.acid), data = wine) +
geom_point(alpha = 0.2) +
geom_smooth(method = 'lm', color = 'red') +
ylim(0, quantile(wine$citric.acid, 0.95))
ggplot(aes(x = citric.acid, y = quality), data = wine) +
geom_point(alpha = 0.2)
ggplot(aes(x = citric.acid, y = quality), data = wine) +
geom_point(alpha = 0.2, position = position_jitter(h = 0))
ggplot(aes(x = citric.acid, y = quality), data = wine) +
geom_point(alpha = 0.1, position = position_jitter(h = 0))
